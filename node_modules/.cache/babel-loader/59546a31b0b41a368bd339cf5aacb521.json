{"ast":null,"code":"var _jsxFileName = \"D:\\\\@Osjur\\\\Tugas\\\\project\\\\habit-rabbit\\\\src\\\\modules\\\\Signup\\\\Singup.js\";\nimport React, { Component } from \"react\";\nimport { Redirect } from 'react-router';\nimport { Form, FormGroup, FormControl, FormLabel, Button, Spinner, FormControlProps } from \"react-bootstrap\";\nimport \"./Signup.css\";\nimport \"./home.css\";\nimport WcoLogo from \"../../images/wco_logo.png\";\nimport { ISignUpResult } from \"amazon-cognito-identity-js\";\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n\nclass Signup extends Component {\n  constructor(props) {\n    super(props);\n\n    this.showConfirmationForm = () => {\n      if (this.state.redirect) return /*#__PURE__*/React.createElement(Redirect, {\n        to: \"/\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 28,\n          columnNumber: 37\n        }\n      });\n      const {\n        confirmationCode\n      } = this.state;\n      return /*#__PURE__*/React.createElement(Form, {\n        noValidate: true,\n        onSubmit: this.onConfirm,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 32,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        controlId: \"confirmationCode\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 34,\n          columnNumber: 11\n        }\n      }, \"Confirmation code\"), /*#__PURE__*/React.createElement(FormControl, {\n        name: \"confirmationCode\",\n        type: \"tel\",\n        value: confirmationCode,\n        onChange: this.onChange,\n        minLength: 1,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormControl.Feedback, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(Form.Text, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 43,\n          columnNumber: 11\n        }\n      }, \"A confirmation code will be sent to the email address provided\")), /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        type: \"submit\",\n        disabled: !this.validateConfirmForm(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 47,\n          columnNumber: 9\n        }\n      }, this.state.loading ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        size: \"sm\",\n        animation: \"border\",\n        className: \"mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 49,\n          columnNumber: 19\n        }\n      }), \"Confirming\") : /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 13\n        }\n      }, \"Confirm\")));\n    };\n\n    this.showSignupForm = () => {\n      const {\n        email,\n        password,\n        confirmPassword,\n        validated\n      } = this.state;\n      return /*#__PURE__*/React.createElement(Form, {\n        noValidate: true,\n        validated: validated,\n        onSubmit: e => this.onSignup(e),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 59,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(FormGroup, {\n        controlId: \"email\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 60,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 61,\n          columnNumber: 11\n        }\n      }, \"Email\"), /*#__PURE__*/React.createElement(FormControl, {\n        name: \"email\",\n        type: \"email\",\n        onChange: this.onChange,\n        value: email,\n        minLength: 5,\n        isValid: emailRegex.test(email.toLowerCase()),\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 62,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormControl.Feedback, {\n        type: \"invalid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 70,\n          columnNumber: 11\n        }\n      }, \"Must be a valid email address\")), /*#__PURE__*/React.createElement(FormGroup, {\n        controlId: \"password\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 72,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 73,\n          columnNumber: 11\n        }\n      }, \"Password\"), /*#__PURE__*/React.createElement(FormControl, {\n        name: \"password\",\n        type: \"password\",\n        onChange: this.onChange,\n        value: password,\n        minLength: 8,\n        isValid: password.length >= 8,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 74,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormControl.Feedback, {\n        type: \"invalid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 82,\n          columnNumber: 11\n        }\n      }, \"Must be at least 8 characters\"), /*#__PURE__*/React.createElement(Form.Text, {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 83,\n          columnNumber: 11\n        }\n      }, \"Must be at least 8 characters\")), /*#__PURE__*/React.createElement(FormGroup, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 87,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(FormLabel, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 88,\n          columnNumber: 11\n        }\n      }, \"Confirm Password\"), /*#__PURE__*/React.createElement(FormControl, {\n        name: \"confirmPassword\",\n        type: \"password\",\n        onChange: this.onChange,\n        value: confirmPassword,\n        minLength: 8,\n        isValid: confirmPassword.length >= 8 && password === confirmPassword,\n        required: true,\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 11\n        }\n      }), /*#__PURE__*/React.createElement(FormControl.Feedback, {\n        type: \"invalid\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 97,\n          columnNumber: 11\n        }\n      }, \"Passwords must be identical\")), /*#__PURE__*/React.createElement(Button, {\n        block: true,\n        type: \"submit\",\n        disabled: !this.validateSignupForm(),\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 99,\n          columnNumber: 9\n        }\n      }, this.state.loading ? /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(Spinner, {\n        size: \"sm\",\n        animation: \"border\",\n        className: \"mr-2\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 101,\n          columnNumber: 19\n        }\n      }), \"Signing up\") : /*#__PURE__*/React.createElement(\"span\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 102,\n          columnNumber: 13\n        }\n      }, \"Sign up\")));\n    };\n\n    this.state = {\n      loading: false,\n      email: \"\",\n      password: \"\",\n      confirmPassword: \"\",\n      confirmationCode: \"\",\n      user: undefined,\n      redirect: false,\n      validated: false\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/React.createElement(\"div\", {\n      className: \"Signup\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 110,\n        columnNumber: 7\n      }\n    }, this.showSignupForm(), /*#__PURE__*/React.createElement(Button, {\n      className: \"back-button\",\n      block: true,\n      type: \"submit\",\n      href: \"/home\",\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 114,\n        columnNumber: 9\n      }\n    }, /*#__PURE__*/React.createElement(\"span\", {\n      __self: this,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 115,\n        columnNumber: 11\n      }\n    }, \"Kembali\")));\n  }\n\n}\n\nexport default Signup;","map":{"version":3,"sources":["D:/@Osjur/Tugas/project/habit-rabbit/src/modules/Signup/Singup.js"],"names":["React","Component","Redirect","Form","FormGroup","FormControl","FormLabel","Button","Spinner","FormControlProps","WcoLogo","ISignUpResult","emailRegex","Signup","constructor","props","showConfirmationForm","state","redirect","confirmationCode","onConfirm","onChange","validateConfirmForm","loading","showSignupForm","email","password","confirmPassword","validated","e","onSignup","test","toLowerCase","length","validateSignupForm","user","undefined","render"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\r\nimport { Redirect } from 'react-router';\r\nimport { Form, FormGroup, FormControl, FormLabel, Button, Spinner, FormControlProps } from \"react-bootstrap\";\r\nimport \"./Signup.css\";\r\nimport \"./home.css\";\r\nimport WcoLogo from \"../../images/wco_logo.png\";\r\nimport { ISignUpResult } from \"amazon-cognito-identity-js\";\r\n\r\nconst emailRegex = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n\r\nclass Signup extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n\r\n    this.state = {\r\n      loading: false,\r\n      email: \"\",\r\n      password: \"\",\r\n      confirmPassword: \"\",\r\n      confirmationCode: \"\",\r\n      user: undefined,\r\n      redirect: false,\r\n      validated: false,\r\n    };\r\n  }\r\n\r\n  showConfirmationForm = () => {\r\n    if (this.state.redirect) return <Redirect to='/' />\r\n    const { confirmationCode } = this.state;\r\n\r\n    return (\r\n      <Form noValidate onSubmit={this.onConfirm}>\r\n        <FormGroup controlId=\"confirmationCode\">\r\n          <FormLabel>Confirmation code</FormLabel>\r\n          <FormControl\r\n            name=\"confirmationCode\"\r\n            type=\"tel\"\r\n            value={confirmationCode}\r\n            onChange={this.onChange}\r\n            minLength={1}\r\n            required />\r\n          <FormControl.Feedback />\r\n          <Form.Text className=\"text-muted\">\r\n            A confirmation code will be sent to the email address provided\r\n          </Form.Text>\r\n        </FormGroup>\r\n        <Button block type=\"submit\" disabled={!this.validateConfirmForm()}>\r\n          {this.state.loading ?\r\n            <span><Spinner size=\"sm\" animation=\"border\" className=\"mr-2\" />Confirming</span> :\r\n            <span>Confirm</span>}\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  showSignupForm = () => {\r\n    const { email, password, confirmPassword, validated } = this.state;\r\n    return (\r\n      <Form noValidate validated={validated} onSubmit={(e: React.FormEvent<HTMLFormElement>) => this.onSignup(e)}>\r\n        <FormGroup controlId=\"email\">\r\n          <FormLabel>Email</FormLabel>\r\n          <FormControl\r\n            name=\"email\"\r\n            type=\"email\"\r\n            onChange={this.onChange}\r\n            value={email}\r\n            minLength={5}\r\n            isValid={emailRegex.test(email.toLowerCase())}\r\n            required />\r\n          <FormControl.Feedback type=\"invalid\">Must be a valid email address</FormControl.Feedback>\r\n        </FormGroup>\r\n        <FormGroup controlId=\"password\" >\r\n          <FormLabel>Password</FormLabel>\r\n          <FormControl\r\n            name=\"password\"\r\n            type=\"password\"\r\n            onChange={this.onChange}\r\n            value={password}\r\n            minLength={8}\r\n            isValid={password.length >= 8}\r\n            required />\r\n          <FormControl.Feedback type=\"invalid\">Must be at least 8 characters</FormControl.Feedback>\r\n          <Form.Text className=\"text-muted\">\r\n            Must be at least 8 characters\r\n          </Form.Text>\r\n        </FormGroup>\r\n        <FormGroup>\r\n          <FormLabel>Confirm Password</FormLabel>\r\n          <FormControl\r\n            name=\"confirmPassword\"\r\n            type=\"password\"\r\n            onChange={this.onChange}\r\n            value={confirmPassword}\r\n            minLength={8}\r\n            isValid={confirmPassword.length >= 8 && password === confirmPassword}\r\n            required />\r\n          <FormControl.Feedback type=\"invalid\">Passwords must be identical</FormControl.Feedback>\r\n        </FormGroup>\r\n        <Button block type=\"submit\" disabled={!this.validateSignupForm()}>\r\n          {this.state.loading ?\r\n            <span><Spinner size=\"sm\" animation=\"border\" className=\"mr-2\" />Signing up</span> :\r\n            <span>Sign up</span>}\r\n        </Button>\r\n      </Form>\r\n    );\r\n  }\r\n\r\n  render() {\r\n    return (\r\n      <div className=\"Signup\">\r\n\r\n        {this.showSignupForm()}\r\n\r\n        <Button className='back-button' block type=\"submit\" href='/home'>\r\n          <span>Kembali</span>\r\n        </Button>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default Signup;"]},"metadata":{},"sourceType":"module"}